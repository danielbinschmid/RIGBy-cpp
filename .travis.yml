sudo: false
language: cpp

branches:
  only:
    - master

git:
  submodules: false

os: 
  - linux
dist: xenial

addons:
  apt:
    update: true
    #sources:
    #  - ubuntu-toolchain-r-test
    packages:
      # Docs
      - doxygen
      - doxygen-latex # tex support
      - ghostscript
      - graphviz      # scheme
      - lcov          # Code Coverage
      - valgrind      # Memory Leaks
      #- python3       # For conversion script

# Usefull only with trusty dist or if force update is needed (it doesn't work in addons option)
before_install:
  - git submodule --quiet update --init --recursive --remote
#  ############################################################################
#  # Install a recent CMake
#  ############################################################################
#  - |
#    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
#      CMAKE_INSTALLER=install-cmake.sh && \
#        curl -sSL https://github.com/Kitware/CMake/releases/download/v3.14.1/cmake-3.14.1-Linux-x86_64.sh -o ${CMAKE_INSTALLER} && \
#        chmod +x ${CMAKE_INSTALLER} && \
#        sudo ./${CMAKE_INSTALLER} --prefix=/usr/local --skip-license
#    fi
#  - alias cmake=/usr/local/bin/cmake
#  - export PATH=/usr/local/bin/cmake/bin:/usr/local/bin:${PATH}
#  - |
#    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
#      echo "need cmake 3.12" && \
#        brew update && \
#        brew install ccache && \
#        brew upgrade cmake && \
#        export PATH="/usr/local/opt/ccache/libexec:$PATH"
#    fi
#  # Build
#  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
#  - sudo apt-get update -qq
#
#install:
#  - sudo apt-get install -qq g++-6
#  - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 90


script:
  # Building
  - $CXX --version
  - cmake --version
  - mkdir -p build && cd build
  - cmake -DCODE_COVERAGE=ON ..
  - cmake --build . 
  # Tests
  #- ctest # useless to run two times this tests 
  #- ./Riemann-Geometrie --gtest_output="xml:../docs/GoogleTestReport.xml"
  # Memory test
  - valgrind --leak-check=full --show-leak-kinds=all ./Riemann-Geometrie --gtest_output="xml:../docs/GoogleTestReport.xml"
  # Code Coverage
  - lcov --directory . --capture --output-file coverage.info
  - lcov --remove coverage.info 'dependencies/*' '3rd-party/*' '/usr/include/*' '/usr/lib/*' -o coverage.info
  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
  # Docs after new GoogleTestReport.md
  - cd ../docs
  #- python3 gtest2md.py GoogleTestReport.xml GoogleTestReport.md

  - doxygen Doxyfile
  
deploy:
  provider: pages
  skip_cleanup: true
  local_dir: docs/html
  github_token: $GH_REPO_TOKEN
  on:
    branch: master
    
notifications:
  email: false

